import { InputSize, InputType, InputVariant, ValidationResult } from '@/types';
declare class MaInput extends HTMLElement {
    private _shadowRoot;
    private _inputContainer;
    private _label;
    private _input;
    private _helperText;
    private _clearButton;
    private _eyeButton;
    private _validationRules;
    private _lastValidationResult;
    private _previousValue;
    static get observedAttributes(): string[];
    constructor();
    private _initializeComponent;
    attributeChangedCallback(_name: string, oldValue: string, newValue: string): void;
    connectedCallback(): void;
    private _updateComponent;
    private _handleInput;
    private _handleChange;
    private _handleFocus;
    private _handleBlur;
    private _handleKeydown;
    private _handleKeyup;
    private _handleClear;
    private _handleTogglePassword;
    private _validateValue;
    private _updateValidationRules;
    focus(): void;
    blur(): void;
    select(): void;
    setSelectionRange(start: number, end: number, direction?: 'forward' | 'backward' | 'none'): void;
    clear(): void;
    validate(): Promise<ValidationResult>;
    clearValidation(): void;
    setCustomValidation(customFn: (value: string) => boolean | string | Promise<boolean | string>): void;
    setValue(value: string, options?: {
        silent?: boolean;
    }): void;
    getValue(): string;
    getValidationResult(): ValidationResult;
    get value(): string;
    set value(value: string);
    get size(): InputSize;
    set size(value: InputSize);
    get variant(): InputVariant;
    set variant(value: InputVariant);
    get type(): InputType;
    set type(value: InputType);
    get placeholder(): string;
    set placeholder(value: string);
    get disabled(): boolean;
    set disabled(value: boolean);
    get readonly(): boolean;
    set readonly(value: boolean);
    get required(): boolean;
    set required(value: boolean);
    get label(): string;
    set label(value: string);
    get error(): string;
    set error(value: string);
    get helperText(): string;
    set helperText(value: string);
    get clearable(): boolean;
    set clearable(value: boolean);
}
export default MaInput;
//# sourceMappingURL=ma-input.d.ts.map